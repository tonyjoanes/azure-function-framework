<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AzureFunctionFramework</name>
    </assembly>
    <members>
        <member name="T:AzureFunctionFramework.Attributes.HttpRouteAttribute">
            <summary>
            Attribute to specify a custom HTTP route for function endpoints.
            When applied to a class that inherits from HttpFunctionBase, this attribute
            allows customization of the HTTP trigger route beyond the default class name.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Attributes.HttpRouteAttribute.Route">
            <summary>
            Gets the custom route template for the HTTP function.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.Attributes.HttpRouteAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpRouteAttribute with the specified route template.
            </summary>
            <param name="route">The route template (e.g., "api/hello/{name}")</param>
        </member>
        <member name="T:AzureFunctionFramework.Attributes.ServiceBusTriggerAttribute">
             <summary>
             Attribute to specify custom Service Bus topic and subscription names for function triggers.
            
             Azure Service Bus Topics provide a pub/sub messaging pattern where:
             • TOPIC = A named message destination (like a radio station)
             • SUBSCRIPTION = A named listener within a topic (like tuning to that radio station)
             • CONNECTION = The connection string to your Azure Service Bus namespace
            
             Example: [ServiceBusTrigger("orders", "processing", "ServiceBus")]
             • "orders" = Topic name (where messages are published)
             • "processing" = Subscription name (your function's specific listener)
             • "ServiceBus" = Connection string name in configuration
            
             When applied to a class that inherits from ServiceBusFunctionBase&lt;TMessage&gt;, this attribute
             allows customization of the Service Bus trigger configuration beyond the default configuration values.
             </summary>
        </member>
        <member name="P:AzureFunctionFramework.Attributes.ServiceBusTriggerAttribute.TopicName">
            <summary>
            Gets the custom topic name for the Service Bus function.
            A topic is like a "channel" or "radio station" where messages are published.
            Multiple functions can listen to the same topic using different subscriptions.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Attributes.ServiceBusTriggerAttribute.SubscriptionName">
            <summary>
            Gets the custom subscription name for the Service Bus function.
            A subscription is like "tuning in" to a specific topic. Each subscription
            receives its own copy of messages published to the topic.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Attributes.ServiceBusTriggerAttribute.Connection">
            <summary>
            Gets the connection string name for the Service Bus.
            This references a connection string in your configuration that contains
            the Service Bus namespace URL and authentication credentials.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.Attributes.ServiceBusTriggerAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ServiceBusTriggerAttribute with the specified topic and subscription.
            </summary>
            <param name="topicName">The topic name - where messages are published (optional, will use configuration if not specified)</param>
            <param name="subscriptionName">The subscription name - your function's specific listener (optional, will use configuration if not specified)</param>
            <param name="connection">The connection string name in configuration (defaults to "ServiceBus")</param>
        </member>
        <member name="T:AzureFunctionFramework.BaseClasses.HttpFunctionBase">
            <summary>
            Abstract base class for HTTP-triggered Azure Functions.
            Provides common functionality for HTTP requests including error handling,
            logging, and route customization via attributes.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.BaseClasses.HttpFunctionBase.Logger">
            <summary>
            Gets the logger instance for this function.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the HttpFunctionBase.
            </summary>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.Run(Microsoft.Azure.Functions.Worker.Http.HttpRequestData)">
            <summary>
            Handles the HTTP request. This method is called by the Azure Functions runtime.
            Derived classes should override this method and apply the [HttpTrigger] attribute.
            </summary>
            <param name="req">The HTTP request data.</param>
            <returns>The HTTP response.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.HandleRequest(Microsoft.Azure.Functions.Worker.Http.HttpRequestData)">
            <summary>
            Handles the business logic for the HTTP request.
            Derived classes must implement this method.
            </summary>
            <param name="req">The HTTP request data.</param>
            <returns>An action result representing the response.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.GetRouteData(Microsoft.Azure.Functions.Worker.Http.HttpRequestData,System.String)">
            <summary>
            Gets route data from the HTTP request.
            </summary>
            <param name="req">The HTTP request data.</param>
            <param name="key">The route parameter key.</param>
            <returns>The route parameter value, or null if not found.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.GetQueryParameter(Microsoft.Azure.Functions.Worker.Http.HttpRequestData,System.String)">
            <summary>
            Gets query parameter from the HTTP request.
            </summary>
            <param name="req">The HTTP request data.</param>
            <param name="key">The query parameter key.</param>
            <returns>The query parameter value, or null if not found.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.DeserializeBodyAsync``1(Microsoft.Azure.Functions.Worker.Http.HttpRequestData)">
            <summary>
            Deserializes the request body to the specified type.
            </summary>
            <typeparam name="T">The type to deserialize to.</typeparam>
            <param name="req">The HTTP request data.</param>
            <returns>The deserialized object, or default(T) if the body is empty.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.CreateResponse(Microsoft.Azure.Functions.Worker.Http.HttpRequestData,Microsoft.AspNetCore.Mvc.IActionResult)">
            <summary>
            Creates an HTTP response from an action result.
            </summary>
            <param name="req">The HTTP request data.</param>
            <param name="result">The action result.</param>
            <returns>The HTTP response data.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.HttpFunctionBase.CreateErrorResponse(Microsoft.Azure.Functions.Worker.Http.HttpRequestData,System.Exception)">
            <summary>
            Creates an error response for exceptions.
            </summary>
            <param name="req">The HTTP request data.</param>
            <param name="exception">The exception that occurred.</param>
            <returns>The HTTP response data.</returns>
        </member>
        <member name="T:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1">
             <summary>
             Abstract base class for Service Bus-triggered Azure Functions.
            
             Service Bus Topics provide a pub/sub messaging pattern:
             • PUBLISHERS send messages to a TOPIC (like "orders", "inventory", "payments")
             • SUBSCRIBERS listen to a TOPIC using a SUBSCRIPTION (like "processing", "updates")
             • Each SUBSCRIPTION gets its own copy of messages from the TOPIC
            
             Usage:
             [ServiceBusTrigger("orders", "processing", "ServiceBus")]
             public class OrderFunction : ServiceBusFunctionBase&lt;OrderMessage&gt;
             {
                 protected override async Task HandleMessage(OrderMessage message, FunctionContext context)
                 {
                     // Your business logic here
                 }
             }
            
             Provides common functionality for Service Bus message processing including error handling,
             logging, deserialization, and dead lettering on errors.
             </summary>
             <typeparam name="TMessage">The type of message to deserialize from JSON.</typeparam>
        </member>
        <member name="P:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1.Logger">
            <summary>
            Gets the logger instance for this function.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the ServiceBusFunctionBase.
            </summary>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1.Run(System.String,Microsoft.Azure.Functions.Worker.FunctionContext)">
            <summary>
            Handles the Service Bus message. This method is called by the Azure Functions runtime.
            Derived classes should override this method and apply the [ServiceBusTrigger] attribute.
            </summary>
            <param name="message">The Service Bus message.</param>
            <param name="context">The function execution context.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1.HandleMessage(`0,Microsoft.Azure.Functions.Worker.FunctionContext)">
            <summary>
            Handles the business logic for the Service Bus message.
            Derived classes must implement this method.
            </summary>
            <param name="message">The deserialized message.</param>
            <param name="context">The function execution context.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:AzureFunctionFramework.BaseClasses.ServiceBusFunctionBase`1.DeserializeMessageAsync(System.String)">
            <summary>
            Deserializes the Service Bus message string to the specified type.
            </summary>
            <param name="message">The message string.</param>
            <returns>The deserialized message object, or null if deserialization fails.</returns>
        </member>
        <member name="T:AzureFunctionFramework.Configuration.ConfigurationValidator">
            <summary>
            Service responsible for validating required configuration at startup.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.ConfigurationValidator.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{AzureFunctionFramework.Configuration.ConfigurationValidator})">
            <summary>
            Initializes a new instance of the ConfigurationValidator.
            </summary>
            <param name="configuration">The configuration instance.</param>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.ConfigurationValidator.ValidateConfiguration(AzureFunctionFramework.Configuration.FunctionFrameworkOptions)">
            <summary>
            Validates that all required configuration values are present.
            </summary>
            <param name="options">The framework options containing validation settings.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when required configuration is missing.</exception>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.ConfigurationValidator.ValidateServiceBusConfiguration(System.Collections.Generic.List{System.String})">
            <summary>
            Validates Service Bus related configuration.
            </summary>
            <param name="missingConfigurations">List to add missing configurations to.</param>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.ConfigurationValidator.IsValidConnectionString(System.String)">
            <summary>
            Checks if a connection string appears to be valid.
            </summary>
            <param name="connectionString">The connection string to validate.</param>
            <returns>True if the connection string appears valid, false otherwise.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.ConfigurationValidator.IsValidKeyVaultName(System.String)">
            <summary>
            Checks if a Key Vault name appears to be valid.
            </summary>
            <param name="keyVaultName">The Key Vault name to validate.</param>
            <returns>True if the Key Vault name appears valid, false otherwise.</returns>
        </member>
        <member name="T:AzureFunctionFramework.Configuration.FunctionDiscoveryService">
            <summary>
            Service responsible for discovering and registering function classes via reflection.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.FunctionDiscoveryService.#ctor(Microsoft.Extensions.Logging.ILogger{AzureFunctionFramework.Configuration.FunctionDiscoveryService})">
            <summary>
            Initializes a new instance of the FunctionDiscoveryService.
            </summary>
            <param name="logger">The logger instance.</param>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.FunctionDiscoveryService.DiscoverAndRegisterFunctions(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Discovers function classes in the current assembly and registers them with the DI container.
            </summary>
            <param name="services">The service collection to register functions with.</param>
            <param name="assemblies">Optional assemblies to scan. If not provided, scans the current assembly.</param>
            <returns>The number of function classes discovered and registered.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.FunctionDiscoveryService.GetFunctionTypes(System.Reflection.Assembly)">
            <summary>
            Gets all types that inherit from function base classes.
            </summary>
            <param name="assembly">The assembly to scan.</param>
            <returns>A collection of function types.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.FunctionDiscoveryService.IsFunctionType(System.Type)">
            <summary>
            Determines if a type is a function class that should be registered.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a function class, false otherwise.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Configuration.FunctionDiscoveryService.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            Checks if a type is a subclass of a generic type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="genericType">The generic base type.</param>
            <returns>True if the type is a subclass of the generic type, false otherwise.</returns>
        </member>
        <member name="T:AzureFunctionFramework.Configuration.FunctionFrameworkOptions">
            <summary>
            Configuration options for the Azure Function Framework.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.AppConfigConnectionString">
            <summary>
            Gets or sets the Azure App Configuration connection string.
            If not provided, will attempt to use default configuration sources.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.KeyVaultName">
            <summary>
            Gets or sets the Azure Key Vault name (URI will be built internally).
            If not provided, Key Vault integration will be skipped.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.EnvironmentLabel">
            <summary>
            Gets or sets the environment label for App Configuration (e.g., "dev", "staging", "prod").
            Defaults to "dev".
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.Prefix">
            <summary>
            Gets or sets the prefix for configuration keys in App Configuration.
            This helps isolate your application's configuration from others.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.EnableEnvironmentVariableInjection">
            <summary>
            Gets or sets whether to enable automatic environment variable injection from configuration.
            When enabled, configuration values will be injected as environment variables for binding resolution.
            Defaults to true.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.EnableConfigurationValidation">
            <summary>
            Gets or sets whether to validate required configuration at startup.
            When enabled, the framework will fail fast if required configuration is missing.
            Defaults to true.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.EnableAutoDiscovery">
            <summary>
            Gets or sets whether to enable automatic function discovery via reflection.
            When enabled, the framework will automatically discover and register function classes.
            Defaults to true.
            </summary>
        </member>
        <member name="P:AzureFunctionFramework.Configuration.FunctionFrameworkOptions.AddCustomService">
            <summary>
            Gets or sets the action to configure additional services in the DI container.
            This allows consumers to register their own services alongside the framework's defaults.
            </summary>
        </member>
        <member name="T:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions">
            <summary>
            Extension methods for configuring the Azure Function Framework.
            </summary>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.AddFunctionFramework(Microsoft.Extensions.Hosting.IHostApplicationBuilder,System.Action{AzureFunctionFramework.Configuration.FunctionFrameworkOptions})">
            <summary>
            Adds the Azure Function Framework to the host builder.
            This configures App Configuration, Key Vault, environment variable injection,
            function discovery, and validation.
            </summary>
            <param name="builder">The host application builder.</param>
            <param name="configureOptions">Optional configuration action for framework options.</param>
            <returns>The host application builder for chaining.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.DiscoverAndRegisterFunctions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Discovers and registers function classes in the current assembly.
            </summary>
            <param name="services">The service collection to register functions with.</param>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.IsFunctionType(System.Type)">
            <summary>
            Determines if a type is a function class that should be registered.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a function class, false otherwise.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Checks if a type is a subclass of another type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="baseType">The base type.</param>
            <returns>True if the type is a subclass of the base type, false otherwise.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            Checks if a type is a subclass of a generic type.
            </summary>
            <param name="type">The type to check.</param>
            <param name="genericType">The generic base type.</param>
            <returns>True if the type is a subclass of the generic type, false otherwise.</returns>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.InjectEnvironmentVariablesFromConfiguration(Microsoft.Extensions.Configuration.IConfiguration,AzureFunctionFramework.Configuration.FunctionFrameworkOptions)">
            <summary>
            Injects configuration values as environment variables for Azure Functions binding resolution.
            </summary>
            <param name="configuration">The configuration instance.</param>
            <param name="options">The framework options.</param>
        </member>
        <member name="M:AzureFunctionFramework.Extensions.FunctionFrameworkExtensions.InjectFunctionSpecificServiceBusConfiguration(Microsoft.Extensions.Configuration.IConfiguration,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Injects function-specific Service Bus configuration as environment variables.
            This allows each function to have its own topic/subscription configuration.
            </summary>
            <param name="configuration">The configuration instance.</param>
            <param name="environmentVariables">The dictionary to add environment variables to.</param>
        </member>
        <member name="T:AzureFunctionFramework.Extensions.ConfigurationValidationService">
            <summary>
            Hosted service for validating configuration at startup.
            </summary>
        </member>
    </members>
</doc>
